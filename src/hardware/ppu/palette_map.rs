use std::collections::HashMap;

pub fn get_color_map() -> HashMap<u8, [u8; 4]> {
    let mut color_map = HashMap::<u8, [u8; 4]>::new();
    color_map.insert(0x00, [0x62, 0x62, 0x62, 0xFF]);
    color_map.insert(0x01, [0x00, 0x1c, 0x95, 0xFF]);
    color_map.insert(0x02, [0x19, 0x04, 0xac, 0xff]);
    color_map.insert(0x03, [0x42, 0x00, 0x9d, 0xff]);
    color_map.insert(0x04, [0x61, 0x00, 0x6b, 0xff]);
    color_map.insert(0x05, [0x6e, 0x00, 0x25, 0xff]);
    color_map.insert(0x06, [0x65, 0x05, 0x00, 0xff]);
    color_map.insert(0x07, [0x49, 0x1e, 0x00, 0xff]);
    color_map.insert(0x08, [0x22, 0x37, 0x00, 0xff]);
    color_map.insert(0x09, [0x00, 0x49, 0x00, 0xff]);
    color_map.insert(0x0A, [0x00, 0x4f, 0x00, 0xff]);
    color_map.insert(0x0B, [0x00, 0x48, 0x16, 0xff]);
    color_map.insert(0x0C, [0x00, 0x35, 0x5e, 0xff]);
    color_map.insert(0x0D, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x0E, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x0F, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x10, [0xab, 0xab, 0xab, 0xff]);
    color_map.insert(0x11, [0x0c, 0x4e, 0xdb, 0xff]);
    color_map.insert(0x12, [0x3d, 0x2e, 0xff, 0xff]);
    color_map.insert(0x13, [0x71, 0x15, 0xf3, 0xff]);
    color_map.insert(0x14, [0x9b, 0x0b, 0xb9, 0xff]);
    color_map.insert(0x15, [0xb0, 0x12, 0x62, 0xff]);
    color_map.insert(0x16, [0xa9, 0x27, 0x04, 0xff]);
    color_map.insert(0x17, [0x89, 0x46, 0x00, 0xff]);
    color_map.insert(0x18, [0x57, 0x66, 0x00, 0xff]);
    color_map.insert(0x19, [0x23, 0x7f, 0x00, 0xff]);
    color_map.insert(0x1A, [0x00, 0x89, 0x00, 0xff]);
    color_map.insert(0x1B, [0x00, 0x83, 0x32, 0xff]);
    color_map.insert(0x1C, [0x00, 0x6d, 0x90, 0xff]);
    color_map.insert(0x1D, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x1E, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x1F, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x20, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x21, [0x57, 0xa5, 0xff, 0xff]);
    color_map.insert(0x22, [0x82, 0x87, 0xff, 0xff]);
    color_map.insert(0x23, [0xb4, 0x6d, 0xff, 0xff]);
    color_map.insert(0x24, [0xdf, 0x60, 0xff, 0xff]);
    color_map.insert(0x25, [0xf8, 0x63, 0xc6, 0xff]);
    color_map.insert(0x26, [0xf8, 0x74, 0x6d, 0xff]);
    color_map.insert(0x27, [0xde, 0x90, 0x20, 0xff]);
    color_map.insert(0x28, [0xb3, 0xae, 0x00, 0xff]);
    color_map.insert(0x29, [0x81, 0xc8, 0x00, 0xff]);
    color_map.insert(0x2A, [0x56, 0xd5, 0x22, 0xff]);
    color_map.insert(0x2B, [0x3d, 0xd3, 0x6f, 0xff]);
    color_map.insert(0x2C, [0x3e, 0xc1, 0xc8, 0xff]);
    color_map.insert(0x2D, [0x4e, 0x4e, 0x4e, 0xff]);
    color_map.insert(0x2E, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x2F, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x30, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x31, [0xbe, 0xe0, 0xff, 0xff]);
    color_map.insert(0x32, [0xcd, 0xd4, 0xff, 0xff]);
    color_map.insert(0x33, [0xe0, 0xca, 0xff, 0xff]);
    color_map.insert(0x34, [0xf1, 0xc4, 0xff, 0xff]);
    color_map.insert(0x35, [0xfc, 0xc4, 0xef, 0xff]);
    color_map.insert(0x36, [0xfd, 0xca, 0xce, 0xff]);
    color_map.insert(0x37, [0xf5, 0xd4, 0xaf, 0xff]);
    color_map.insert(0x38, [0xe6, 0xdf, 0x9c, 0xff]);
    color_map.insert(0x39, [0xd3, 0xe9, 0x9a, 0xff]);
    color_map.insert(0x3A, [0xc2, 0xef, 0xa8, 0xff]);
    color_map.insert(0x3B, [0xb7, 0xef, 0xc4, 0xff]);
    color_map.insert(0x3C, [0xb6, 0xea, 0xe5, 0xff]);
    color_map.insert(0x3D, [0xb8, 0xb8, 0xb8, 0xff]);
    color_map.insert(0x3E, [0x00, 0x00, 0x00, 0xff]);
    color_map.insert(0x3F, [0x00, 0x00, 0x00, 0xff]);

    return color_map;
}
